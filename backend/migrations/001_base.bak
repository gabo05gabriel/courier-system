-- 001_base.sql (PostgreSQL)

-- ROLES
CREATE TABLE IF NOT EXISTS roles (
  rol_id SERIAL PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL UNIQUE
);

-- USUARIOS
CREATE TABLE IF NOT EXISTS usuarios (
  usuario_id SERIAL PRIMARY KEY,
  nombre VARCHAR(150) NOT NULL,
  email VARCHAR(150) NOT NULL UNIQUE,
  telefono VARCHAR(20),
  contrasena VARCHAR(255) NOT NULL,
  rol_id INT NOT NULL,
  CONSTRAINT fk_usuarios_rol FOREIGN KEY (rol_id) REFERENCES roles(rol_id)
);

-- ZONAS
CREATE TABLE IF NOT EXISTS zonas (
  zona_id SERIAL PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL UNIQUE
);

-- RUTAS
CREATE TABLE IF NOT EXISTS rutas (
  ruta_id SERIAL PRIMARY KEY,
  mensajero_id INT NOT NULL,
  zona_id INT NOT NULL,
  fecha DATE NOT NULL DEFAULT CURRENT_DATE,
  duracion_estimada INT,
  duracion_real INT,
  latitud_inicio DECIMAL(9,6),
  longitud_inicio DECIMAL(9,6),
  latitud_fin DECIMAL(9,6),
  longitud_fin DECIMAL(9,6),
  CONSTRAINT rutas_unq_mensajero_fecha UNIQUE (mensajero_id, fecha),
  CONSTRAINT fk_rutas_mensajero FOREIGN KEY (mensajero_id) REFERENCES usuarios(usuario_id),
  CONSTRAINT fk_rutas_zona FOREIGN KEY (zona_id) REFERENCES zonas(zona_id)
);

-- ENVIOS
CREATE TABLE IF NOT EXISTS envios (
  envio_id SERIAL PRIMARY KEY,
  remitente_id INT NOT NULL,
  origen_direccion TEXT NOT NULL,
  destino_direccion TEXT NOT NULL,
  destinatario_nombre VARCHAR(150) NOT NULL,
  destinatario_telefono VARCHAR(20) NOT NULL,
  peso DECIMAL(10,2) NOT NULL CHECK (peso > 0),
  tipo_servicio VARCHAR(15) NOT NULL CHECK (tipo_servicio IN ('Estándar','Express')),
  estado VARCHAR(15) NOT NULL DEFAULT 'Pendiente' CHECK (estado IN ('Pendiente','En Ruta','Entregado','Rechazado','Cancelado')),
  observaciones TEXT,
  creado_en TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  ruta_id INT,
  CONSTRAINT fk_envios_remitente FOREIGN KEY (remitente_id) REFERENCES usuarios(usuario_id),
  CONSTRAINT fk_envios_ruta FOREIGN KEY (ruta_id) REFERENCES rutas(ruta_id)
);

-- ENTREGAS
CREATE TABLE IF NOT EXISTS entregas (
  entrega_id SERIAL PRIMARY KEY,
  envio_id INT NOT NULL,
  mensajero_id INT NOT NULL,
  fecha_entrega TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  estado VARCHAR(15) NOT NULL CHECK (estado IN ('Entregado','Rechazado')),
  firma BYTEA,
  foto BYTEA,
  CONSTRAINT fk_entregas_envio FOREIGN KEY (envio_id) REFERENCES envios(envio_id),
  CONSTRAINT fk_entregas_mensajero FOREIGN KEY (mensajero_id) REFERENCES usuarios(usuario_id)
);

-- HISTORIAL DE ENVIOS
CREATE TABLE IF NOT EXISTS historial_envios (
  evento_id SERIAL PRIMARY KEY,
  envio_id INT NOT NULL,
  tipo_evento VARCHAR(20) NOT NULL CHECK (tipo_evento IN ('Creado','Asignado','Recogido','Entregado','Incidente','Cancelado')),
  fecha_evento TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  ubicacion_latitud DECIMAL(9,6),
  ubicacion_longitud DECIMAL(9,6),
  CONSTRAINT fk_historial_envio FOREIGN KEY (envio_id) REFERENCES envios(envio_id)
);

-- INCIDENTES
CREATE TABLE IF NOT EXISTS incidentes (
  incidente_id SERIAL PRIMARY KEY,
  envio_id INT NOT NULL,
  tipo VARCHAR(20) NOT NULL CHECK (tipo IN ('Retraso','Daño','Pérdida','Otro')),
  descripcion TEXT NOT NULL,
  fecha_reporte TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  estado VARCHAR(15) NOT NULL DEFAULT 'Pendiente' CHECK (estado IN ('Pendiente','Resuelto')),
  CONSTRAINT fk_incidentes_envio FOREIGN KEY (envio_id) REFERENCES envios(envio_id)
);

-- METODOS DE PAGO
CREATE TABLE IF NOT EXISTS metodos_pago (
  metodo_id SERIAL PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL UNIQUE
);

-- PAGOS
CREATE TABLE IF NOT EXISTS pagos (
  pago_id SERIAL PRIMARY KEY,
  envio_id INT NOT NULL UNIQUE,
  metodo_id INT NOT NULL,
  monto DECIMAL(10,2) NOT NULL CHECK (monto >= 0),
  estado VARCHAR(15) NOT NULL CHECK (estado IN ('Pendiente','Pagado')),
  fecha_pago TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_pagos_envio FOREIGN KEY (envio_id) REFERENCES envios(envio_id),
  CONSTRAINT fk_pagos_metodo FOREIGN KEY (metodo_id) REFERENCES metodos_pago(metodo_id)
);

-- UBICACIONES DE MENSAJEROS
CREATE TABLE IF NOT EXISTS ubicaciones_mensajeros (
  ubicacion_id SERIAL PRIMARY KEY,
  mensajero_id INT NOT NULL,
  ruta_id INT,
  latitud DECIMAL(9,6) NOT NULL,
  longitud DECIMAL(9,6) NOT NULL,
  fecha_hora TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_ubicaciones_mensajero FOREIGN KEY (mensajero_id) REFERENCES usuarios(usuario_id),
  CONSTRAINT fk_ubicaciones_ruta FOREIGN KEY (ruta_id) REFERENCES rutas(ruta_id)
);
